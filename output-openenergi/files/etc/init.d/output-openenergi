#!/bin/sh /etc/rc.common
START=85
USE_PROCD=1

remove_output() {
	local cfg="$1"
	local connection
	config_get connection "$cfg" connection
	[ -n "$connection" -a "$connection" = "openenergi" ] && {
		uci delete mosquitto.$cfg
	}
}

add_output() {
	local deviceid="$1"
	local sastoken="$2"
	local address="$3"
	local newcfg
	newcfg=$(uci add mosquitto bridge)
	uci -q batch <<-EOF
		set mosquitto.$newcfg.connection=openenergi
		set mosquitto.$newcfg.address="$address:8883"
		set mosquitto.$newcfg.cleansession=1
		set mosquitto.$newcfg.keepalive=30
		set mosquitto.$newcfg.attempt_unsubscribe=false
		set mosquitto.$newcfg.notifications=false
		set mosquitto.$newcfg.protocol_version=mqttv311
		set mosquitto.$newcfg.try_private=false
		set mosquitto.$newcfg.capath=/etc/ssl/certs
		set mosquitto.$newcfg.remote_clientid="$deviceid"
		set mosquitto.$newcfg.remote_username="$address/$deviceid/api-version=2016-11-14"
		set mosquitto.$newcfg.remote_password="$sastoken"
		add_list mosquitto.$newcfg.topic="# out 1 ext/openenergi/out/ devices/$deviceid/messages/events/"
		add_list mosquitto.$newcfg.topic="# in 1 ext/openenergi/in/ devices/$deviceid/messages/devicebound/"
		commit
EOF
}

add_instance() {
	local cfg="$1"
	local enabled deviceid sastoken
	config_get_bool enabled "$cfg" enabled 0
	config_get deviceid "$cfg" deviceid
	config_get sastoken "$cfg" sastoken
	config_get address "$cfg" address "openenergi.azure-devices.net"
	# We always remove it, and re-add it if needed.
	config_load mosquitto && config_foreach remove_output bridge
	if [ $enabled -eq 0 ]; then
		echo "Disabling Open Energi Stream"
		monit unmonitor output-openenergi
	else
		[ -z "$deviceid" ] && { echo "deviceid is required!"; return 1;}
		[ -z "$sastoken" ] && { echo "sastoken is required!"; return 1;}
		echo "Enabling Open Energi Stream"
		add_output "$deviceid" "$sastoken" "$address"
		procd_open_instance
		procd_set_param command output-openenergi
		procd_set_param file /etc/config/output-openenergi
		procd_close_instance
		monit monitor output-openenergi
	fi
	uci commit
	reload_config
}

start_service() {
	# We make sure our mqtt bridges are in place, and then start our daemon
	config_load output-openenergi && config_foreach add_instance general
}

service_triggers() {
	procd_add_reload_trigger output-openenergi
}
